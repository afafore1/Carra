Team CARRA’s project is a Scheduler. You would ask, what makes your scheduler different? Well, it isn’t.Just like any other scheduler you can create, modify, and delete events. You can set reminders to any time of the day, any day of the week, any month of the year (within reason), and you can snooze them to your liking. You can view your work calendar which saves your data on an encrypted file on your computer. You can access this data upon startup, of course after logging in with your appropriate userna me and password, saved in a file on the sever. There is a hierarchy in this Scheduler where only the admin can add and remove users (for security reasons), and where the users can receive event notifications (which you can accept or reject) from the server scheduled by their superiors. The Scheduler can check what the server has synced to your calendar, and can suggest events for you to do in you free time. What makes this scheduler different from all the other Calendars and Schedulers is its implementation. Applications are created everyday with the same idea in mind. Some fail and some go on to become big successes. Why? Because they were implemented better.  We are not saying we are better than all the calendars out there, but we are saying that what makes our calendar unique is the effort every individual put into this project to make it a success. We followed the guidelines in this class, we worked seriously on our deliverables, we thought ahead and planned every step of the way. Surely, we hit a few bumps in the road, disagreements over whether the file should be stored in a database or on the local computer, but we have our reasons for our decisions, and our presentation in class allowed us to realize that. We didn’t chose it because it was easier, we chose it because it works best for what we want to accomplish. We acted as software engineers following the waterfall model. The sequential process consisting of 6 phases which are all in our project documentation. We will discuss the code and then demonstrate. All classes extend javax.swing since we are creating a Java Swing Application and we are altering the innate behavior of the class meaning we are changing the non-static functions. Scheduler class: 
????? GUI class: Imports java.awt, java.util, and java.swing packages. Java.awt  contains all of the classes for creating user interfaces and for painting graphics and images  It sets the background and foreground colors, and the font. It lists the days of the week in order, the months in orders, and the departments in our company (IT, Marketing....). It finds the current day, month, and year. It sets up the Calendar (width, height, date format) and initializes it. It doesn’t allow resizing of the calendar, or reordering of the days.If you are not an admin, you will not be able to see the Add User and Remove User buttons since you cannot do so as a regular employee. Only if you are logged in, can you see the calendar. The log out functionality is available along with the print functionality. AddUser class: To create a user, you will need a username and a password which will have to be confirmed. If the passwords you enter do not match, you will receive a notification. If everything works out, the password will be encrypted and saved to matching the username. You will receive a confirmation notification once create is pressed. The department you will be added to will also be specified.After all this, all the fields will return to blank. The username and password set will be stored in a Hashmap. The file will be serialized at the end. EditUser class: You can search for users using the search box where you will get a list of the usernames matching what you have as input and their status as Admin on non-Admin. If the username is exactly equal to the input or contains it as a substring, it will be shown in the list. 
Search is done on the Hashmap using an iterator. To edit the status of the user, the value must be set to true and will be saved in the file.  RemoveUser class: To delete a user, you can search for the username.  Once you select the one you wish to delete, you will be asked if you are sure as a final precaution (since all their data will be erased). Once you’ve confirmed, you will receive a success notification. If not, you will receive a notification showing your cancellation. Logon class: You have the username and password fields with an auto-login checkbox. Serialized file must be opened. If no input is typed in the username field, you will receive a notification. If the username, password pair is authenticated, you will be logged in and will receive a success notification. If it isn’t valid, then you cannot login and will receive an error notification. SelectionListener class: It implements ListSelectionListener interface that allows change to occur and for actions to be modified.  ??????  Serialize class: If it finds the file needed (without throwing an error), it will get the user information from the Hashmap and the list of events from the array list. Once you’re done, it will write the new user information provided and the events to the file. User class: User has a username and a password, an email, login status, and admin status. Constructor takes the username, password, salt, admin status, and email. There are getters and setters for all of these fields. 
